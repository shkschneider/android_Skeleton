// <https://developer.android.com/studio/releases/gradle-plugin.html>

buildscript {
    ext.versions = [
        android: 28,
        java: 8,
        kotlin: '1.3.10',
        skeleton: '9.3.0'
    ]
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1' // JitPack
    }
}
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
        // flatDir { dirs 'libs' }
    }
}
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            def isAndroidApplication = project.plugins.findPlugin('com.android.application') != null
            def isAndroidLibrary = project.plugins.findPlugin('com.android.library') != null
            def hasKotlinAndroid = project.plugins.findPlugin('kotlin-android') != null
            android {
                def defaultConfigVersionCode = versionCode()
                // Android
                compileSdkVersion versions.android
                buildToolsVersion "${versions.android}.0.3"
                defaultConfig {
                    minSdkVersion 16 // Jelly Bean 4.1.x
                    targetSdkVersion versions.android
                    versionCode defaultConfigVersionCode
                    versionName versions.skeleton
                }
                buildTypes {
                    debug {
                        debuggable true
                        jniDebuggable true
                        zipAlignEnabled true
                        multiDexEnabled true
                        shrinkResources false
                    }
                    release {
                        debuggable false
                        jniDebuggable false
                        zipAlignEnabled true
                        multiDexEnabled true
                        shrinkResources false // TODO
                    }
                }
                // Java 8
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                // Kotlin
                if (hasKotlinAndroid) {
                    sourceSets {
                        main.java.srcDirs += 'src/main/kotlin'
                    }
                }
                // Applications and Libraries
                if (isAndroidApplication) {
                    flavorDimensions 'default'
                    applicationVariants.all { variant ->
                        variant.outputs.all { output ->
                            outputFileName = "${applicationId}-${variant.productFlavors[0].name}" +
                                    "_v${defaultConfig.versionName}r${defaultConfigVersionCode}" +
                                    "-${variant.variantData.variantConfiguration.buildType.name}.apk"
                        }
                    }
                }
                if (isAndroidLibrary) resourcePrefix 'sk_'
                // Lint
                lintOptions {
                    checkReleaseBuilds true
                    abortOnError true
                }
            }
            if (hasKotlinAndroid) {
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk${versions.java}:${versions.kotlin}"
                }
            }
        }
    }
}

def versionCode(increment) {
    Properties versionProperties = new Properties()
    def versionPropertiesFile = file("${rootProject.projectDir}/version.properties")
    if (!versionPropertiesFile.exists()) throw new GradleException(versionPropertiesFile.path)
    versionProperties.load(new FileInputStream(versionPropertiesFile))
    if (increment ?: false) {
        versionProperties['versionCode'] = ((versionProperties['versionCode'] ?: "0").toInteger() + 1).toString()
        versionProperties.store(versionPropertiesFile.newWriter(), null)
    }
    return versionProperties['versionCode']
}

// <https://stackoverflow.com/a/35041457>
def gitRevision() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def travis(android) {
    def travisFile = file("${rootProject.projectDir}/.travis.yml")
    if (!travisFile.exists()) throw new GradleException(travisFile.path)
    String content = travisFile.getText('UTF-8')
    content = content.replaceFirst('build-tools-[0-9.]+', "build-tools-${android.buildToolsVersion}")
    content = content.replaceFirst('android-[0-9]+', "android-${versions.android}")
    new File('.travis.yml').write(content, 'UTF-8')
}
