apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group='com.github.shkschneider'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'

    defaultConfig {
        minSdkVersion 14 // Ice Cream Sandwich 4.x.x
        targetSdkVersion 26
        versionCode 32
        versionName '6.1.0'
    }
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
}

dependencies {
    compile 'com.android.support:design:26.0.1'
    compile 'com.android.support:palette-v7:26.0.1'
    compile 'com.android.support:recyclerview-v7:26.0.1'
    compile 'com.android.support:preference-v14:26.0.1'

    compile 'com.android.volley:volley:1.0.0'

    compile 'com.google.code.gson:gson:2.8.1'
}

task javadoc(type: Javadoc) {
    failOnError false
    title = "Skeleton"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file('build/docs/javadoc/')
    options {
        links 'http://docs.oracle.com/javase/7/docs/api/'
        linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
        // overview = 'overview.html'
        memberLevel = JavadocMemberLevel.PACKAGE
    }
    include '**/me/shkschneider/skeleton/**'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task jar(type: Jar, dependsOn: 'assembleRelease') {
    from fileTree(dir: 'build/intermediates/classes/release')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}
