apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    Properties versionProperties = new Properties()
    def versionPropertiesFile = file('version.properties')
    if (!versionPropertiesFile.exists()) {
        throw new GradleException("Could not read version.properties")
    }
    versionProperties.load(new FileInputStream(versionPropertiesFile))
    def androidDefaultConfigVersionCode = (versionProperties['versionCode'] ?: "0").toInteger()

    defaultConfig {
        minSdkVersion 16 // Jelly Bean 4.1.x
        targetSdkVersion 28
        versionCode androidDefaultConfigVersionCode
        versionName "${versions.skeleton}"
        setProperty('archivesBaseName', "me.shkschneider.skeleton_v" + defaultConfig.versionName + "r" + defaultConfig.versionCode + ".aar")
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
    }
    // https://issuetracker.google.com/issues/36967265
    defaultPublishConfig 'release'
    lintOptions {
        disable 'MissingTranslation'
        checkReleaseBuilds true
        abortOnError false
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk${versions.java}:${versions.kotlin}"

    implementation "androidx.core:core-ktx:${versions.androidx}"
    implementation "androidx.appcompat:appcompat:${versions.androidx}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx}"
    implementation "androidx.palette:palette:${versions.androidx}"
    implementation "androidx.preference:preference:${versions.androidx}"

    implementation 'android.arch.work:work-runtime-ktx:1.0.0-alpha09'

    implementation 'com.google.code.gson:gson:2.8.5'
}

task bump() << {
    print '> Bump...'
    Properties versionProperties = new Properties()
    def versionPropertiesFile = file('version.properties')
    if (!versionPropertiesFile.exists()) {
        throw new GradleException("Could not read version.properties")
    }
    versionProperties.load(new FileInputStream(versionPropertiesFile))
    versionProperties['versionCode'] = ((versionProperties['versionCode'] ?: "0").toInteger() + 1).toString()
    versionProperties.store(versionPropertiesFile.newWriter(), null)
    print " v${versions.skeleton}r" + versionProperties['versionCode'] + "\n"
}
task travis() << {
    print '> Travis...'
    def travisFile = file('../.travis.yml')
    if (!travisFile.exists()) {
        throw new GradleException(".travis.yml")
    }
    String content = travisFile.getText('UTF-8')
    content = content.replaceFirst('build-tools-[0-9.]+', "build-tools-${android.buildToolsVersion}")
    content = content.replaceFirst('android-[0-9]+', "${android.compileSdkVersion}")
    new File('.travis.yml').write(content, 'UTF-8')
    print " build-tools-${android.buildToolsVersion} ${android.compileSdkVersion}\n"
}
tasks.whenTaskAdded { task ->
    if (task.name == 'preReleaseBuild') {
        task.dependsOn bump
        task.dependsOn travis
    }
}

task doc(type: org.jetbrains.dokka.gradle.DokkaAndroidTask) << {
    print '> Documentation...' + '\n'
    moduleName = 'skeleton'
    outputFormat = 'html'
    outputDirectory = "${rootProject.buildDir}/dokka"
    jdkVersion = versions.java
    skipEmptyPackages = true
    includeNonPublic = false
    reportUndocumented = false
    noStdlibLink = false
    externalDocumentationLink {
        url = new URL('https://developer.android.com/reference/kotlin')
        packageListUrl = new URL('https://developer.android.com/reference/package-list')
    }
    externalDocumentationLink {
        url = new URL('https://developer.android.com/reference/')
        packageListUrl = new URL('https://developer.android.com/reference/android/support/package-list')
    }
    print "$outputDirectory" + '\n'
}
