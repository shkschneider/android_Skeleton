apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    Properties versionProperties = new Properties()
    def versionPropertiesFile = file('version.properties')
    if (!versionPropertiesFile.exists()) {
        throw new GradleException("Could not read version.properties")
    }
    versionProperties.load(new FileInputStream(versionPropertiesFile))
    def androidDefaultConfigVersionCode = (versionProperties['versionCode'] ?: "0").toInteger()

    defaultConfig {
        minSdkVersion 16 // Jelly Bean 4.1.x
        targetSdkVersion 28
        versionCode androidDefaultConfigVersionCode
        versionName "${versions.skeleton}"
        setProperty('archivesBaseName', "me.shkschneider.skeleton_v" + defaultConfig.versionName + "r" + defaultConfig.versionCode + ".aar")
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
    }
    defaultPublishConfig 'release'
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
    // publishNonDefault true
    sourceSets {
        // main.kotlin.srcDirs += 'src/main/kotlin'
        // main.java.srcDirs += 'src/main/kotlin'
    }
//    tasks.whenTaskAdded { task ->
//        if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
//            print '===' + task.name + '\n'
//        }
//        if (task.name == 'generateReleaseBuildConfig') {
//            print '> Bump...'
//            if (!versionPropertiesFile.exists()) {
//                throw new GradleException("Could not read version.properties")
//            }
//            versionProperties.load(new FileInputStream(versionPropertiesFile))
//            versionProperties['versionCode'] = (androidDefaultConfigVersionCode + 1).toString()
//            versionProperties.store(versionPropertiesFile.newWriter(), null)
//            print versionProperties['versionCode'] + '\n'
//        }
//    }
}

dependencies {
    implementation "androidx.palette:palette:${versions.androidx}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx}"
    implementation "androidx.legacy:legacy-preference-v14:${versions.androidx}"
    implementation "com.google.android.material:material:${versions.androidx}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk${versions.java}:${versions.kotlin}"

    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'android.arch.work:work-runtime:1.0.0-alpha09'
}

// ./build/dokka/skeleton/index.html
task doc(type: org.jetbrains.dokka.gradle.DokkaAndroidTask) {
    moduleName = 'skeleton'
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka" // FIXME
    jdkVersion = versions.java
    skipEmptyPackages = true
    includeNonPublic = false
    reportUndocumented = false
    noStdlibLink = false
    externalDocumentationLink {
        url = new URL('https://developer.android.com/reference/kotlin')
        packageListUrl = new URL('https://developer.android.com/reference/package-list')
    }
    externalDocumentationLink {
        url = new URL('https://developer.android.com/reference/')
        packageListUrl = new URL('https://developer.android.com/reference/android/support/package-list')
    }
    print "$outputDirectory\n"
}
