apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    Properties versionProperties = new Properties()
    def versionPropertiesFile = file('version.properties')
    if (versionPropertiesFile.exists()) versionProperties.load(new FileInputStream(versionPropertiesFile))
    def androidDefaultConfigVersionCode = (versionProperties['versionCode'] ?: "0").toInteger()

    defaultConfig {
        applicationId 'me.shkschneider.skeleton.demo'
        minSdkVersion 16 // Jelly Bean 4.1.x
        targetSdkVersion 28
        versionCode androidDefaultConfigVersionCode
        versionName "${versions.skeleton}"
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                outputFileName = applicationId + "-" + variant.productFlavors[0].name +
                        "_v" + defaultConfig.versionName + "r" + defaultConfig.versionCode +
                        "-" + variant.variantData.variantConfiguration.buildType.name + ".apk"
            }
        }
    }
    sourceSets {
        // main.kotlin.srcDirs += 'src/main/kotlin'
        // main.java.srcDirs += 'src/main/kotlin'
    }
    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('../release.keystore')
            storePassword 'android'
            keyAlias 'androidkey'
            keyPassword 'android'
        }
    }
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
    buildTypes {
        debug {
            // applicationIdSuffix '.dev'
            // versionNameSuffix '-DEV'
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            multiDexEnabled true
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            buildConfigField "boolean", "MOCK", "true"
            resValue "string", "url", "http://android.com"
        }
        release {
            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            multiDexEnabled true
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            buildConfigField "boolean", "MOCK", "false"
            resValue "string", "url", "https://android.com"
        }
    }
    defaultPublishConfig 'debug'
    flavorDimensions 'default'
    productFlavors {
        alpha {
            dimension 'default'
            // versionNameSuffix '-ALPHA'
        }
        beta {
            dimension 'default'
            // versionNameSuffix '-BETA'
        }
        prod {
            dimension 'default'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }
}

task bump() << {
    print '> Bump...' + '\n'
//    Properties versionProperties = new Properties()
//    def versionPropertiesFile = file('version.properties')
//    if (!versionPropertiesFile.exists()) {
//        throw new GradleException("Could not read version.properties")
//    }
//    versionProperties.load(new FileInputStream(versionPropertiesFile))
//    versionProperties['versionCode'] = ((versionProperties['versionCode'] ?: "0").toInteger() + 1).toString()
//    versionProperties.store(versionPropertiesFile.newWriter(), null)
//    print versionProperties['versionCode'] + '\n'
}
task travis() << {
    print '> Updating Travis...' + '\n'
//    def travisFile = file('../.travis.yml')
//    if (!travisFile.exists()) {
//        throw new GradleException(".travis.yml")
//    }
//    String content = travisFile.getText('UTF-8')
//    content = content.replaceFirst('build-tools-[0-9.]+', "build-tools-${android.buildToolsVersion}")
//    content = content.replaceFirst('android-[0-9]+', "${android.compileSdkVersion}")
//    new File('.travis.yml').write(content, 'UTF-8')
}
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.dependsOn travis
    }
    if (task.name == 'assembleRelease') {
        task.dependsOn bump
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk${versions.java}:${versions.kotlin}"

    implementation ('com.squareup.picasso:picasso:2.71828') {
        exclude group: 'com.android.support', module: '*'
    }

    implementation project(':library')
    // implementation 'com.github.shkschneider:android_Skeleton:${versions.skeleton}'
}
